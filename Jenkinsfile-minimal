pipeline {
    agent any
    
    parameters {
        choice(
            name: 'COLOR',
            choices: ['green', 'blue'],
            description: 'Deployment color for blue-green deployment'
        )
    }
    
    environment {
        COLOR = "${params.COLOR}"
        // Use a simple, lightweight image that works
        IMAGE = "nginx:alpine"
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "üöÄ Starting Minimal Blue-Green Deployment"
                    echo "üé® Target Color: ${COLOR}"
                    echo "üê≥ Using Image: ${IMAGE}"
                    
                    def previousColor = (COLOR == 'blue') ? 'green' : 'blue'
                    echo "üîÑ Previous Color: ${previousColor}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo "‚ò∏Ô∏è Deploying ${COLOR} environment with minimal resources..."
                script {
                    try {
                        sh """
                            echo "Creating minimal ${COLOR} deployment..."
                            
                            # Create deployment using kubectl directly (no files needed)
                            kubectl create deployment myapp-${COLOR} --image=${IMAGE} --replicas=1 --dry-run=client -o yaml | \\
                            kubectl label --local -f - app=myapp color=${COLOR} -o yaml | \\
                            kubectl apply -f -
                            
                            # Ensure service exists
                            kubectl expose deployment myapp-${COLOR} --name=myapp-service --port=80 --target-port=80 --type=NodePort --dry-run=client -o yaml | \\
                            kubectl apply -f -
                            
                            # Update service selector to the current color by default
                            kubectl patch service myapp-service -p '{"spec":{"selector":{"app":"myapp","color":"${COLOR}"}}}'
                            
                            echo "Current deployments:"
                            kubectl get deployments -l app=myapp
                        """
                        echo "‚úÖ Deployment created successfully!"
                    } catch (Exception e) {
                        echo "‚ùå Kubernetes deployment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Wait for Rollout') {
            steps {
                echo "‚è≥ Waiting for ${COLOR} deployment to be ready..."
                script {
                    try {
                        timeout(time: 2, unit: 'MINUTES') {
                            sh """
                                echo "Checking rollout status for myapp-${COLOR}..."
                                kubectl rollout status deployment/myapp-${COLOR} --timeout=120s
                                
                                echo "Deployment status:"
                                kubectl get deployment myapp-${COLOR} -o wide
                                
                                echo "Pod status:"
                                kubectl get pods -l app=myapp,color=${COLOR}
                            """
                        }
                        echo "‚úÖ Rollout completed successfully!"
                    } catch (Exception e) {
                        echo "‚ùå Rollout failed or timed out: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Simple Health Check') {
            steps {
                echo "üè• Simple health check for ${COLOR}..."
                script {
                    try {
                        sh """
                            echo "Checking if pods are running..."
                            kubectl get pods -l app=myapp,color=${COLOR}
                            
                            # Simple check - just verify pods are running
                            RUNNING_PODS=\$(kubectl get pods -l app=myapp,color=${COLOR} --field-selector=status.phase=Running --no-headers | wc -l)
                            if [ "\$RUNNING_PODS" -eq "0" ]; then
                                echo "‚ùå No running pods found!"
                                exit 1
                            fi
                            echo "‚úÖ Found \$RUNNING_PODS running pod(s)"
                        """
                        echo "‚úÖ Health check passed!"
                    } catch (Exception e) {
                        echo "‚ùå Health check failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Manual Approval') {
            steps {
                script {
                    def previousColor = (COLOR == 'blue') ? 'green' : 'blue'
                    echo "üéØ Ready to switch traffic to ${COLOR} deployment"
                    
                    sh """
                        echo "=== DEPLOYMENT SUMMARY ==="
                        kubectl get deployments -l app=myapp -o wide
                        kubectl get service myapp-service -o wide
                        kubectl get pods -l app=myapp
                    """
                    
                    timeout(time: 5, unit: 'MINUTES') {
                        input message: """
                        üö¶ Switch traffic to ${COLOR}?
                        
                        Current: Service points to ${previousColor}
                        Ready: ${COLOR} deployment is healthy
                        
                        Click 'Proceed' to switch traffic
                        """, 
                        ok: 'Proceed with Traffic Switch'
                    }
                }
            }
        }
        
        stage('Switch Traffic') {
            steps {
                script {
                    def previousColor = (COLOR == 'blue') ? 'green' : 'blue'
                    echo "üîÑ Switching traffic from ${previousColor} to ${COLOR}..."
                    try {
                        sh """
                            echo "Current service selector:"
                            kubectl get service myapp-service -o jsonpath='{.spec.selector}'
                            echo ""
                            
                            echo "Switching service to ${COLOR}..."
                            kubectl patch service myapp-service -p '{"spec":{"selector":{"app":"myapp","color":"${COLOR}"}}}'
                            
                            echo "New service selector:"
                            kubectl get service myapp-service -o jsonpath='{.spec.selector}'
                            echo ""
                            
                            echo "Service endpoints:"
                            kubectl get endpoints myapp-service
                        """
                        echo "‚úÖ Traffic switched to ${COLOR}!"
                    } catch (Exception e) {
                        echo "‚ùå Traffic switch failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    def previousColor = (COLOR == 'blue') ? 'green' : 'blue'
                    try {
                        timeout(time: 1, unit: 'MINUTES') {
                            input message: """
                            üßπ Remove old ${previousColor} deployment?
                            
                            Traffic is now on: ${COLOR}
                            Old deployment: ${previousColor} (can be removed)
                            
                            """, 
                            ok: "Remove ${previousColor}"
                            
                            echo "üßπ Removing old ${previousColor} deployment..."
                            sh """
                                kubectl delete deployment myapp-${previousColor} --ignore-not-found=true
                                kubectl get deployments -l app=myapp
                            """
                            echo "‚úÖ Cleanup completed!"
                        }
                    } catch (Exception e) {
                        echo "‚è≠Ô∏è Cleanup skipped - keeping both deployments"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh """
                    echo "=== FINAL STATUS ==="
                    kubectl get deployments -l app=myapp -o wide || echo "No deployments"
                    kubectl get service myapp-service -o wide || echo "No service"
                    kubectl get pods -l app=myapp || echo "No pods"
                """
            }
        }
        
        success {
            echo "üéâ Blue-Green deployment successful!"
            script {
                sh """
                    echo "‚úÖ SUCCESS: ${COLOR} deployment active"
                    echo "üåê Access via: minikube service myapp-service --url"
                    echo "üé® Active Color: ${COLOR}"
                """
            }
        }
        
        failure {
            echo "‚ùå Deployment failed!"
            script {
                try {
                    def previousColor = (COLOR == 'blue') ? 'green' : 'blue'
                    echo "üîÑ Attempting rollback to ${previousColor}..."
                    sh """
                        kubectl patch service myapp-service -p '{"spec":{"selector":{"app":"myapp","color":"${previousColor}"}}}'
                        echo "Rollback completed - service points to ${previousColor}"
                    """
                } catch (Exception e) {
                    echo "‚ùå Rollback failed: ${e.getMessage()}"
                }
            }
        }
    }
}