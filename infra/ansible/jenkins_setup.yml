---
# Jenkins Setup Playbook for Amazon Linux 2
# This playbook installs and configures Jenkins with Docker, kubectl, and other DevOps tools

- name: Setup Jenkins Server
  hosts: jenkins
  become: yes
  vars:
    jenkins_user: "jenkins"
    system_user: "ec2-user"
    
  tasks:
    # Update system packages
    - name: Update package cache
      command: yum makecache
      changed_when: false

    # Install Java 17 (required for Jenkins 2.528.1+)
    - name: Install Java 17 Amazon Corretto repository
      become: yes
      shell: |
        rpm --import https://yum.corretto.aws/corretto.key
        curl -Lo /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
      args:
        creates: /etc/yum.repos.d/corretto.repo

    - name: Install Java 17 Amazon Corretto
      become: yes
      yum:
        name: java-17-amazon-corretto
        state: present

    - name: Set Java 17 as system default
      become: yes
      command: alternatives --set java /usr/lib/jvm/java-17-amazon-corretto.x86_64/bin/java

    # Install Git and Maven (Amazon Linux 2023)
    - name: Install Git and Maven (AL2023)
      ansible.builtin.dnf:
        name: 
          - git
          - maven
        state: present
        use_backend: dnf5
      when: ansible_distribution == "Amazon" and ansible_distribution_major_version | int >= 2023

    # Install Git and Maven (Amazon Linux 2)
    - name: Install Git and Maven (AL2)
      raw: sudo yum install -y git maven
      when: ansible_distribution == "Amazon" and ansible_distribution_major_version | int < 2023

    # Note: Docker removed to save memory on t3.small instance
    # Applications will be deployed to remote Kubernetes cluster

    # Add Jenkins repository and install
    - name: Add Jenkins repository
      get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo

    - name: Import Jenkins GPG key
      rpm_key:
        key: https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
        state: present

    # Install Jenkins (Amazon Linux 2023)
    - name: Install Jenkins (AL2023)
      ansible.builtin.dnf:
        name: jenkins
        state: present
        use_backend: dnf5
      when: ansible_distribution == "Amazon" and ansible_distribution_major_version | int >= 2023

    # Install Jenkins (Amazon Linux 2)
    - name: Install Jenkins (AL2)
      raw: sudo yum install -y jenkins
      when: ansible_distribution == "Amazon" and ansible_distribution_major_version | int < 2023

    # Configure Jenkins to use Java 17
    - name: Create Jenkins systemd override directory
      become: yes
      file:
        path: /etc/systemd/system/jenkins.service.d
        state: directory

    - name: Configure Jenkins JAVA_HOME for Java 17
      become: yes
      copy:
        content: |
          [Service]
          Environment="JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64"
        dest: /etc/systemd/system/jenkins.service.d/override.conf
      notify:
        - reload systemd
        - restart jenkins

    - name: Configure Jenkins PATH for kubectl access
      become: yes
      copy:
        content: |
          [Service]
          Environment="PATH=/usr/local/bin:/usr/bin:/bin"
          Environment="KUBECONFIG=/var/lib/jenkins/.kube/config"
        dest: /etc/systemd/system/jenkins.service.d/kubectl.conf
      notify:
        - reload systemd
        - restart jenkins

    # Configure Jenkins service
    - name: Start and enable Jenkins service
      systemd:
        name: jenkins
        state: started
        enabled: yes

    # Configure user permissions (Docker groups removed)
    - name: Ensure jenkins user has proper permissions
      user:
        name: "{{ jenkins_user }}"
        groups: wheel
        append: yes

    # Install kubectl for remote Kubernetes cluster management
    - name: Download kubectl
      get_url:
        url: "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'

    # Create kubectl configuration for Jenkins
    - name: Create Jenkins .kube directory
      become: yes
      file:
        path: /var/lib/jenkins/.kube
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'

    - name: Create basic kubeconfig for Jenkins
      become: yes
      copy:
        content: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              server: https://127.0.0.1:6443
              insecure-skip-tls-verify: true
            name: default-cluster
          contexts:
          - context:
              cluster: default-cluster
              user: default-user
            name: default-context
          current-context: default-context
          users:
          - name: default-user
            user: {}
        dest: /var/lib/jenkins/.kube/config
        owner: jenkins
        group: jenkins
        mode: '0600'

    # Note: Minikube removed to save memory - using remote K8s cluster instead
    # For local testing, you can install kind (Kubernetes in Docker) as a lighter alternative

    # Install AWS CLI v2
    - name: Download AWS CLI v2
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: /tmp/awscliv2.zip

    - name: Install unzip for AWS CLI
      raw: sudo yum install -y unzip

    - name: Extract AWS CLI
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Install AWS CLI
      command: /tmp/aws/install --update
      args:
        creates: /usr/local/bin/aws

    # Create directories
    - name: Create .kube directory for ec2-user
      file:
        path: "/home/{{ system_user }}/.kube"
        state: directory
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: '0755'

    - name: Create jenkins-seed directory
      file:
        path: "/home/{{ system_user }}/jenkins-seed"
        state: directory
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: '0755'

    # Create Jenkins seed job template
    - name: Create Jenkins seed job template
      copy:
        content: |
          # Jenkins Seed Job Template
          # This directory contains templates for Jenkins pipeline jobs
          
          # Example pipeline job configuration
          # Place your Jenkinsfile templates here
          
          # To use:
          # 1. Create Jenkins jobs using Job DSL or manually
          # 2. Configure pipelines to use these templates
          # 3. Update with your specific pipeline configurations
          
          # Placeholder files:
          # - Jenkinsfile.example
          # - job-dsl-seed.groovy
          # - pipeline-templates/
        dest: "/home/{{ system_user }}/jenkins-seed/README.md"
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: '0644'

    # Configure SSH authorized keys if public key is provided
    - name: Add SSH public key to authorized_keys
      authorized_key:
        user: "{{ system_user }}"
        key: "{{ jenkins_ssh_pubkey }}"
        state: present
      when: jenkins_ssh_pubkey is defined and jenkins_ssh_pubkey != ""

    # Configure kubeconfig for EKS if cluster name is provided
    - name: Configure EKS kubeconfig
      shell: |
        aws eks update-kubeconfig --region {{ aws_region }} --name {{ eks_cluster_name }} --kubeconfig /home/{{ system_user }}/.kube/config
        chown {{ system_user }}:{{ system_user }} /home/{{ system_user }}/.kube/config
      when: eks_cluster_name is defined and eks_cluster_name != ""
      become: yes

    # Wait for Jenkins to start
    - name: Wait for Jenkins to start
      uri:
        url: "http://localhost:8080"
        method: GET
        status_code: [200, 403]
      register: jenkins_status
      until: jenkins_status.status in [200, 403]
      retries: 30
      delay: 10

    # Get Jenkins initial admin password
    - name: Get Jenkins initial admin password
      slurp:
        src: /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_password
      ignore_errors: yes

    - name: Display Jenkins initial admin password
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_password
      become: yes

    - name: Show Jenkins admin password
      debug:
        msg: "Jenkins initial admin password: {{ jenkins_password.stdout }}"

    # Create kubeconfig placeholder for remote cluster
    - name: Create kubeconfig placeholder
      copy:
        content: |
          # Placeholder kubeconfig - configure for your remote Kubernetes cluster
          # Example configurations:
          # 1. EKS: aws eks update-kubeconfig --region us-east-1 --name your-cluster
          # 2. GKE: gcloud container clusters get-credentials your-cluster --zone us-central1-a
          # 3. Kind: kind get kubeconfig --name your-cluster > ~/.kube/config
          # 4. Manual: copy your cluster's kubeconfig here
          
          apiVersion: v1
          kind: Config
          clusters: []
          contexts: []
          users: []
          current-context: ""
        dest: "/home/{{ system_user }}/.kube/config"
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: '0600'
      tags: kubeconfig

    # Clone the repository for Jenkins job
    - name: Clone project repository to jenkins workspace
      git:
        repo: "https://github.com/YasinSaleem/vle7.git"
        dest: "/var/lib/jenkins/workspace/vle7-app-pipeline"
        force: yes
      become: yes
      become_user: jenkins
      ignore_errors: yes

    # Install Jenkins plugins
    - name: Install essential Jenkins plugins
      shell: |
        # Wait for Jenkins to be fully ready
        sleep 30
        
        # Install plugins using Jenkins CLI
        JENKINS_URL="http://localhost:8080"
        JENKINS_CLI="/var/lib/jenkins/jenkins-cli.jar"
        
        # Download Jenkins CLI
        wget -q -O $JENKINS_CLI $JENKINS_URL/jnlpJars/jenkins-cli.jar || echo "Failed to download CLI"
        
        # Skip setup wizard
        echo "2.0" > /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion
        
        # Create basic job using Job DSL if available
        echo "Jenkins plugin installation attempted"
      become: yes
      ignore_errors: yes
      tags: plugins

    # Kubernetes Configuration for Jenkins
    - name: Create .kube directory for jenkins user
      file:
        path: /var/lib/jenkins/.kube
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'
      become: yes

    - name: Copy kubeconfig to jenkins user
      copy:
        src: ~/.kube/config
        dest: /var/lib/jenkins/.kube/config
        owner: jenkins
        group: jenkins
        mode: '0600'
        backup: yes
      become: yes
      ignore_errors: yes
      tags: kubeconfig

    - name: Alternative - Create basic kubeconfig template for minikube
      shell: |
        if [ ! -f /var/lib/jenkins/.kube/config ]; then
          echo "Creating basic kubeconfig for minikube access"
          # Copy from default location if minikube is set up
          if [ -f /home/ec2-user/.kube/config ]; then
            cp /home/ec2-user/.kube/config /var/lib/jenkins/.kube/config
            chown jenkins:jenkins /var/lib/jenkins/.kube/config
            chmod 600 /var/lib/jenkins/.kube/config
          fi
        fi
      become: yes
      tags: kubeconfig

    # Jenkins Environment Setup (Docker configuration removed)
    - name: Ensure jenkins user has proper sudo access for kubectl
      lineinfile:
        path: /etc/sudoers.d/jenkins
        line: 'jenkins ALL=(ALL) NOPASSWD: /usr/local/bin/kubectl'
        create: yes
        mode: '0440'
      become: yes

    - name: Set KUBECONFIG environment variable for jenkins
      lineinfile:
        path: /etc/environment
        line: 'KUBECONFIG=/var/lib/jenkins/.kube/config'
        create: yes
      become: yes

    - name: Create Jenkins environment file
      copy:
        content: |
          # Jenkins Environment Variables for Remote Kubernetes
          KUBECONFIG=/var/lib/jenkins/.kube/config
          PATH=$PATH:/usr/local/bin
          # Note: Docker removed - using remote container registry or pre-built images
        dest: /var/lib/jenkins/.env
        owner: jenkins
        group: jenkins
        mode: '0644'
      become: yes

    - name: Restart Jenkins to apply configuration changes
      systemd:
        name: jenkins
        state: restarted
        enabled: yes
      become: yes

    # Copy Jenkins job creation script
    - name: Copy Jenkins job creation script
      copy:
        src: "../../scripts/create-jenkins-job.sh"
        dest: "/home/{{ system_user }}/create-jenkins-job.sh"
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: '0755'
      tags: job_creation

    # Wait a bit more for Jenkins to fully restart
    - name: Wait for Jenkins to be fully ready after restart
      uri:
        url: "http://localhost:8080/login"
        method: GET
        status_code: 200
      register: jenkins_login_check
      until: jenkins_login_check.status == 200
      retries: 20
      delay: 15
      tags: job_creation

    # Create Jenkins pipeline job
    - name: Create Jenkins pipeline job
      shell: "/home/{{ system_user }}/create-jenkins-job.sh"
      become: yes
      become_user: "{{ system_user }}"
      register: job_creation_result
      ignore_errors: yes
      tags: job_creation

    - name: Display job creation result
      debug:
        var: job_creation_result.stdout_lines
      when: job_creation_result is defined
      tags: job_creation

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart jenkins
      systemd:
        name: jenkins
        state: restarted

# Post-installation information
- name: Display setup information
  hosts: jenkins
  become: no
  tasks:
    - name: Display Jenkins access information
      debug:
        msg: |
          ==========================================
          Jenkins Setup Complete!
          ==========================================
          
          Jenkins URL: http://{{ ansible_host }}:8080
          
          Initial Setup Steps:
          1. SSH to server: ssh -i {{ ansible_private_key_file }} {{ ansible_user }}@{{ ansible_host }}
          2. Get initial admin password: sudo cat /var/lib/jenkins/secrets/initialAdminPassword
          3. Access Jenkins web interface and complete setup wizard
          4. Install suggested plugins or customize plugin selection
          
          Installed Tools:
          - Java 11 OpenJDK
          - Git & Maven
          - kubectl (for remote Kubernetes)
          - AWS CLI v2
          - Jenkins (latest stable)
          - Python3 & development tools
          
          Optimizations:
          - Docker removed to save memory on t3.small
          - Remote Kubernetes cluster support
          - Lightweight nginx-based deployments
          
          Notes:
          - Configure ~/.kube/config for your Kubernetes cluster
          - Pipeline job created automatically: vle7-app-pipeline
          - Memory optimized for t3.small instances
          
          Kubernetes Setup Required:
          - Configure kubeconfig for your cluster (EKS, GKE, or local)
          - Example: aws eks update-kubeconfig --region us-east-1 --name your-cluster
          
          Security Reminders:
          - Change default Jenkins admin password after setup
          - Configure Jenkins security settings
          - Set up proper authentication and authorization
          ==========================================